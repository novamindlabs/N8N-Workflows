{
  "name": "Version Control n8n Workflows in GitLab with Customer Tag Organization",
  "nodes": [
    {
      "parameters": {},
      "id": "2aaa2725-24b6-46bb-9f9e-153049095183",
      "name": "When clicking ‘Execute workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        496,
        1760
      ],
      "notesInFlow": true,
      "typeVersion": 1,
      "notes": "Manual trigger for testing the workflow execution."
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 3
            }
          ]
        }
      },
      "id": "a6a535bb-a39c-43e7-8121-16187772dacd",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        496,
        1952
      ],
      "notesInFlow": true,
      "typeVersion": 1.2,
      "notes": "Runs the workflow daily at 03:00 (server time)."
    },
    {
      "parameters": {
        "jsCode": "// ---------------------------------------------------------------------------\n// n8n Code Node - Prepare Workflow JSON for UI-Compatible Export\n// ---------------------------------------------------------------------------\n//\n// GOAL: Produce an output *identical* to the workflow JSON downloaded from\n// the n8n UI → Same fields, same structure, same order.\n// ---------------------------------------------------------------------------\n\nreturn $input.all().map(item => {\n    const w = item.json;\n\n    // Keep exactly the fields that appear in a native n8n export\n    // And ensure they are in the correct order\n    const cleaned = {\n        name: w.name,                        // Workflow name\n        nodes: w.nodes || [],               // Workflow nodes\n        pinData: w.pinData || {},           // Pinned node data (empty if not set)\n        connections: w.connections || {},   // Workflow connections\n        active: w.active ?? false,          // Default false like exported UI\n        settings: w.settings || {},         // Workflow-level settings\n        versionId: w.versionId || \"\",       // Keep version ID if present\n        meta: w.meta || {},                 // Additional meta info\n        id: w.id,                           // Workflow unique ID\n        tags: w.tags || []                  // Array of tags\n    };\n\n    // Return the cleaned JSON, ready for export or GitLab storage\n    return {\n        json: cleaned\n    };\n});"
      },
      "id": "da551fd3-0e10-47f8-8325-5ca0b7bd375d",
      "name": "Prepare Workflow JSON for UI-Compatible Export",
      "type": "n8n-nodes-base.code",
      "position": [
        2688,
        1920
      ],
      "notesInFlow": true,
      "typeVersion": 2,
      "notes": "Cleans and normalizes workflow JSON to match n8n export format (only required fields)."
    },
    {
      "parameters": {
        "jsCode": "// ---------------------------------------------------------------------------\n// n8n Code Node - Clean & Normalize Workflow Name\n// ---------------------------------------------------------------------------\n//\n// GOAL: Standardize workflow names by properly formatting [client] tags.\n//\n// - Detects any existing [client] tags in the name.\n// - If a client value exists → Normalize to `[client : NAME]`.\n// - If the tag exists but is empty → Remove it completely.\n// - If no tag is present → Leave the name unchanged.\n//\n// Output structure matches the original item, only the `name` is updated.\n// ---------------------------------------------------------------------------\n\nreturn $input.all().map(item => {\n    const w = item.json;\n\n    // Regex to match patterns like:\n    // [clientXYZ], [client: XYZ], [client : xyz], [client xyz]\n    // [ Client: XYZ] with optional space after [\n    // Also matches empty tags: [client], [client:], [client : ]\n    const clientTag = /\\[\\s*client\\s*:?\\s*([^\\]\\r\\n]*)\\]/i;\n\n    let name = String(w.name || \"\").trim();\n    const match = name.match(clientTag);\n\n    if (match) {\n        // Extract raw client value from the tag\n        const rawClient = match[1] ? match[1].trim() : \"\";\n\n        if (rawClient) {\n            // Normalize client name to uppercase\n            const clientName = rawClient.toUpperCase();\n\n            // Remove the original tag completely\n            name = name.replace(clientTag, \"\").trim();\n\n            // Rebuild the name with the normalized format\n            name = `[client : ${clientName}] ${name}`;\n        } else {\n            // If tag exists but has no value → remove it entirely\n            name = name.replace(clientTag, \"\").trim();\n        }\n    }\n\n    // Return the updated workflow JSON (only name is modified)\n    return {\n        json: {\n            ...w,\n            name\n        }\n    };\n});"
      },
      "id": "092317f4-3c1e-4c9b-af35-fdeabc9e578f",
      "name": "Clean & Normalize Workflow Name",
      "type": "n8n-nodes-base.code",
      "position": [
        2432,
        1920
      ],
      "notesInFlow": true,
      "typeVersion": 2,
      "notes": "Cleans and normalizes workflow name: applies client tag (uppercase) or removes it if missing."
    },
    {
      "parameters": {
        "filters": {
          "tags": "={{ $json.tag_backup }}"
        },
        "requestOptions": {}
      },
      "id": "a0718c04-0981-472d-86f1-d96412dc4b79",
      "name": "Fetch Workflows from n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1744,
        1856
      ],
      "notesInFlow": true,
      "typeVersion": 1,
      "notes": "Fetches only workflows tagged \"backup-workflows\" via n8n API."
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": "={{ $('Set Global GitLab Variables').item.json.gitlab_owner }}",
        "repository": "={{ $('Set Global GitLab Variables').item.json.gitlab_project }}",
        "filePath": "={{ $json.gitlab_file_path }}",
        "asBinaryProperty": false,
        "additionalParameters": {
          "reference": "={{ $('Set Global GitLab Variables').item.json.gitlab_branch }}"
        }
      },
      "id": "79f360ed-86cc-40fe-a105-b3ef23120e97",
      "name": "Fetch Existing File from GitLab",
      "type": "n8n-nodes-base.gitlab",
      "position": [
        3456,
        1856
      ],
      "executeOnce": false,
      "notesInFlow": true,
      "retryOnFail": false,
      "typeVersion": 1,
      "alwaysOutputData": false,
      "onError": "continueErrorOutput",
      "notes": "Fetches the existing workflow backup file from GitLab."
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": "={{ $('Set Global GitLab Variables').item.json.gitlab_owner }}",
        "repository": "={{ $('Set Global GitLab Variables').item.json.gitlab_project }}",
        "filePath": "={{ $json.file_path || $(\"Prepare GitLab File Path\").item.json.gitlab_file_path }}",
        "fileContent": "={{ JSON.stringify($(\"Prepare Workflow JSON for UI-Compatible Export\").item.json, null, 2) }}",
        "commitMessage": "={{ \"Update backup for workflow: \" \n    + $(\"Clean & Normalize Workflow Name\").item.json.name \n    + \" (\" \n    + ($json.file_path || $(\"Prepare GitLab File Path\").item.json.gitlab_file_path) \n    + \")\" \n}}",
        "branch": "={{ $(\"Set Global GitLab Variables\").item.json.gitlab_branch }}"
      },
      "id": "15cd412a-dd8f-4b71-ab54-849a6a535af8",
      "name": "Update Existing File in GitLab",
      "type": "n8n-nodes-base.gitlab",
      "position": [
        3952,
        1680
      ],
      "notesInFlow": true,
      "typeVersion": 1,
      "notes": "Updates the existing workflow backup file in GitLab with the latest JSON export."
    },
    {
      "parameters": {
        "resource": "file",
        "owner": "={{ $('Set Global GitLab Variables').item.json.gitlab_owner }}",
        "repository": "={{ $('Set Global GitLab Variables').item.json.gitlab_project }}",
        "filePath": "={{ $json.gitlab_file_path }}",
        "fileContent": "={{ JSON.stringify($(\"Prepare Workflow JSON for UI-Compatible Export\").item.json, null, 2) }}",
        "commitMessage": "={{ \"Add backup for workflow: \" \n   + $(\"Clean & Normalize Workflow Name\").item.json.name \n   + \" (\" \n   + ($json.gitlab_file_path || $(\"Prepare GitLab File Path\").item.json.gitlab_file_path) \n   + \")\" }}",
        "branch": "={{ $('Set Global GitLab Variables').item.json.gitlab_branch }}"
      },
      "id": "da9f550c-bd0f-4bc2-b221-cab11a8d7be6",
      "name": "Create New File in GitLab",
      "type": "n8n-nodes-base.gitlab",
      "position": [
        3728,
        1952
      ],
      "notesInFlow": true,
      "typeVersion": 1,
      "notes": "Creates a new workflow backup file in GitLab if it does not already exist."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "46c0d9f1-dfe1-4ada-b7e5-0148badac474",
              "name": "status",
              "type": "string",
              "value": "={{ $json.status }}"
            },
            {
              "id": "5810a928-6341-4600-8d8a-147c7b003c79",
              "name": "workflow_name",
              "type": "string",
              "value": "={{ $(\"Prepare Workflow JSON for UI-Compatible Export\").item.json.name }}"
            },
            {
              "id": "d25b1d07-589c-4b02-ae3e-90d3e292dec8",
              "name": "file_path",
              "type": "string",
              "value": "={{ $(\"Prepare GitLab File Path\").item.json.gitlab_file_path }}"
            },
            {
              "id": "226b5ec1-c8e1-43e9-b621-44e8e87328da",
              "name": "branch",
              "type": "string",
              "value": "={{ $(\"Set Global GitLab Variables\").item.json.gitlab_branch }}"
            },
            {
              "id": "596584fb-4c78-4863-909c-728409de7e48",
              "name": "gitlab_owner",
              "type": "string",
              "value": "={{ $(\"Set Global GitLab Variables\").item.json.gitlab_owner }}"
            },
            {
              "id": "c8db01a0-5ca5-4bff-be3f-fe9fe0f5fc7b",
              "name": "gitlab_project",
              "type": "string",
              "value": "={{ $(\"Set Global GitLab Variables\").item.json.gitlab_project }}"
            },
            {
              "id": "c8d1166c-c5b0-44a3-9740-6ae0c5b077b8",
              "name": "execution_type",
              "type": "string",
              "value": "={{ $(\"Set Global GitLab Variables\").item.json.execution_type }}"
            },
            {
              "id": "5ef4679e-0125-419b-b154-b2562198c616",
              "name": "execution_time",
              "type": "string",
              "value": "={{ $now }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5ddc1294-9b87-42d8-93b8-f5e695dbf8bb",
      "name": "Normalize Backup Output",
      "type": "n8n-nodes-base.set",
      "position": [
        5024,
        1872
      ],
      "notesInFlow": true,
      "typeVersion": 3.4,
      "notes": "Normalizes backup output: adds GitLab path, branch, owner, project, execution type & timestamp."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d3a64cab-d823-4bfb-9ff8-3f00f1bd0942",
              "name": "gitlab_owner",
              "type": "string",
              "value": "n8n-ainexusone"
            },
            {
              "id": "c13bd008-2829-4950-862e-94394bd818d6",
              "name": "gitlab_project",
              "type": "string",
              "value": "n8n_workflow_backups"
            },
            {
              "id": "2c58ec25-1e33-406c-821a-62eff539f2db",
              "name": "gitlab_workflow_path",
              "type": "string",
              "value": "workflow_definitions"
            },
            {
              "id": "1517ca87-dba2-4411-af85-8d2c91e7aa42",
              "name": "gitlab_branch",
              "type": "string",
              "value": "main"
            },
            {
              "id": "39a0387d-8195-4c49-9831-c87f77758cdd",
              "name": "tag_backup",
              "type": "string",
              "value": "backup-workflows"
            },
            {
              "id": "3357bb93-0e45-4a8d-aced-ebe5b7e93ef8",
              "name": "execution_type",
              "type": "string",
              "value": "={{ ( $('Schedule Trigger').isExecuted) ? 'Scheduled' : 'Manual' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9939f6ff-8915-47f3-8a87-6ff204fd2c0d",
      "name": "Set Global GitLab Variables",
      "type": "n8n-nodes-base.set",
      "position": [
        992,
        1856
      ],
      "notesInFlow": true,
      "typeVersion": 3.4,
      "notes": "Defines global GitLab variables (owner, project, branch, paths, tags, execution type) for reuse across the workflow."
    },
    {
      "parameters": {
        "jsCode": "// ---------------------------------------------------------------------------\n// n8n Code Node - Prepare GitLab File Path (Dedicated Node)\n// ---------------------------------------------------------------------------\n//\n// GOAL: Generate the GitLab storage path for each workflow without polluting\n//       the workflow JSON that will be versioned. File name is fixed on ID\n//       to avoid duplication when the workflow name changes.\n// ---------------------------------------------------------------------------\n\nreturn $input.all().map(item => {\n    const w = item.json; // Current workflow data\n\n    // --------------------------------------------------------\n    // Helper: normalize accents & slugify safely\n    // --------------------------------------------------------\n    const toSlug = (s) => String(s || '')\n        .normalize('NFKD')                // decompose accented characters\n        .replace(/[\\u0300-\\u036f]/g, '')  // remove diacritics\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')      // replace invalid chars with hyphens\n        .replace(/^-+|-+$/g, '');         // trim hyphens at start/end\n\n    // --------------------------------------------------------\n    // 1. Extract and normalize the client slug if tag exists\n    // --------------------------------------------------------\n    const clientTag = /\\[client\\s*:?\\s*([^\\]\\r\\n]*)\\]/i;\n    const match = (w.name || '').match(clientTag);\n\n    let clientSlug = \"unassigned\"; // Default if no [client: ...] tag is found\n    if (match && match[1].trim()) {\n        clientSlug = toSlug(match[1].trim()) || \"unassigned\";\n    }\n\n    // --------------------------------------------------------\n    // 2. Build the GitLab storage path (ID-based, rename-proof)\n    // --------------------------------------------------------\n    const basePath = $('Set Global GitLab Variables').first().json.gitlab_workflow_path; // From declared variables\n    const filePath = `${basePath}/${clientSlug}/${w.id}.json`;\n\n    // --------------------------------------------------------\n    // 3. Return ONLY the GitLab file path\n    // --------------------------------------------------------\n    return {\n        json: {\n            gitlab_file_path: filePath\n        }\n    };\n});\n"
      },
      "id": "2ea3ccb3-8123-4f49-82be-c4b90e0c5f20",
      "name": "Prepare GitLab File Path",
      "type": "n8n-nodes-base.code",
      "position": [
        2944,
        1920
      ],
      "notesInFlow": true,
      "typeVersion": 2,
      "notes": "Builds a normalized GitLab file path for the workflow backup (workflowId + .json)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "2e7b9fc6-cf3e-4f3c-b8be-a55221f5d1f4",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              },
              "leftValue": "={{ JSON.stringify($(\"Prepare Workflow JSON for UI-Compatible Export\").item.json) }}",
              "rightValue": "={{ JSON.stringify(JSON.parse($json.content.base64Decode().trim())) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9f4fd524-5c9b-4ba6-bef2-a6da86f64c7d",
      "name": "Compare Workflow with GitLab Version",
      "type": "n8n-nodes-base.if",
      "position": [
        3728,
        1760
      ],
      "notesInFlow": true,
      "typeVersion": 2.2,
      "notes": "Compares exported workflow JSON with the GitLab version to detect changes."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e6cb925-589a-4daa-bf5c-73a51092ae9e",
              "name": "status",
              "type": "string",
              "value": "created"
            }
          ]
        },
        "options": {}
      },
      "id": "75b2037f-bad5-4988-9f82-73665e4ae0eb",
      "name": "Mark as Created",
      "type": "n8n-nodes-base.set",
      "position": [
        4560,
        2152
      ],
      "typeVersion": 3.4,
      "notes": "Tags workflow as \"created\" (new file added in GitLab)."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e6cb925-589a-4daa-bf5c-73a51092ae9e",
              "name": "status",
              "type": "string",
              "value": "updated"
            }
          ]
        },
        "options": {}
      },
      "id": "e995304e-5611-4905-9a33-b6fdd70d3655",
      "name": "Mark as Updated",
      "type": "n8n-nodes-base.set",
      "position": [
        4560,
        1792
      ],
      "notesInFlow": true,
      "typeVersion": 3.4,
      "notes": "Tags workflow as \"updated\" after backup comparison."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8e6cb925-589a-4daa-bf5c-73a51092ae9e",
              "name": "status",
              "type": "string",
              "value": "unchanged"
            }
          ]
        },
        "options": {}
      },
      "id": "69533d20-2a48-4cb4-810d-e65c2a4aa71c",
      "name": "Mark as Unchanged",
      "type": "n8n-nodes-base.set",
      "position": [
        4400,
        1972
      ],
      "notesInFlow": true,
      "typeVersion": 3.4,
      "notes": "Tags workflow as \"unchanged\" (no differences found)."
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node — Summarize Backup Results\n// ----------------------------------------\n\nconst items = $input.all();\n\n// Init counters\nlet recap = {\n  created: 0,\n  updated: 0,\n  unchanged: 0,\n  total: items.length,\n};\n\nfor (const item of items) {\n  const status = item.json.status;\n  if (status && recap.hasOwnProperty(status)) {\n    recap[status]++;\n  }\n}\n\n// Build output\nreturn [\n  {\n    json: {\n      execution_type: items[0]?.json.execution_type || \"unknown\",\n      execution_time: items[0]?.json.execution_time || new Date().toISOString(),\n      recap,\n    },\n  },\n];"
      },
      "id": "7af2d653-0358-4b5a-847c-8b1851aa2721",
      "name": "Summarize Backup Results",
      "type": "n8n-nodes-base.code",
      "position": [
        5344,
        1872
      ],
      "notesInFlow": true,
      "typeVersion": 2,
      "notes": "Summarizes backup results: counts created/updated/unchanged workflows and adds execution metadata."
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "id": "90c21f27-3af6-416f-978e-2ff38c300c7a",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        4800,
        1856
      ],
      "notesInFlow": true,
      "typeVersion": 3.2,
      "notes": "Merges outputs from \"Mark as Updated/Unchanged/Created\" into a single stream.\n"
    }
  ],
  "pinData": {},
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Normalize Backup Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Created": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Mark as Updated": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Set Global GitLab Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Unchanged": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Normalize Backup Output": {
      "main": [
        [
          {
            "node": "Summarize Backup Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Workflows from n8n": {
      "main": [
        [
          {
            "node": "Clean & Normalize Workflow Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare GitLab File Path": {
      "main": [
        [
          {
            "node": "Fetch Existing File from GitLab",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New File in GitLab": {
      "main": [
        [
          {
            "node": "Mark as Created",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Global GitLab Variables": {
      "main": [
        [
          {
            "node": "Fetch Workflows from n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Existing File in GitLab": {
      "main": [
        [
          {
            "node": "Mark as Updated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean & Normalize Workflow Name": {
      "main": [
        [
          {
            "node": "Prepare Workflow JSON for UI-Compatible Export",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Existing File from GitLab": {
      "main": [
        [
          {
            "node": "Compare Workflow with GitLab Version",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create New File in GitLab",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Workflow with GitLab Version": {
      "main": [
        [
          {
            "node": "Update Existing File in GitLab",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mark as Unchanged",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set Global GitLab Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Workflow JSON for UI-Compatible Export": {
      "main": [
        [
          {
            "node": "Prepare GitLab File Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "",
  "meta": {
    "templateId": "8042",
    "instanceId": "6dbfa721b4cf806f29f8b5b1e94a99a7bc3b4f1fcaaa32d8ddbfe9a03748c83d"
  },
  "tags": []
}